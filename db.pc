
//////////////////////////////////////////////////////////////////////
// db.pc
// Pro*C file for smsc mediation database access methods
// Copyright Millennium IT Software 2003
//////////////////////////////////////////////////////////////////////

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <oraca.h>
#include <sqlcpr.h>
#include <sqlda.h>
#include <sqlca.h>

//#include "defines.h"				// CJN
#define CDR_INSERT_BLOCK_SIZE 1000	// CJN
//#define CDR_INSERT_BLOCK_SIZE 1


#ifndef ORA_PROC
#include "db.h"
#include "db_data_containers.h"
#include "cdr.h"
#include <fstream>
#endif


extern decoded_cdr *gsm_cdr_block;
extern decoded_cdr *air_cdr_block;
extern bool debug;
extern int array_insert_size;
extern int global_cdr_counter;
extern ofstream f_log;



#define BUF_LEN 	100
#define FETCH_SIZE	1000
#define BUF_LENTH	20		


EXEC SQL DECLARE CDR DATABASE; 
EXEC SQL DECLARE RATING DATABASE;


EXEC SQL BEGIN DECLARE SECTION;
	char *login;
EXEC SQL END DECLARE SECTION;


void sql_error(char *msg)
{
	cout << endl << msg << endl;
	sqlca.sqlerrm.sqlerrmc[sqlca.sqlerrm.sqlerrml] = '\0';
	oraca.orastxt.orastxtc[oraca.orastxt.orastxtl] = '\0';
	oraca.orasfnm.orasfnmc[oraca.orasfnm.orasfnml] = '\0';
	cout << sqlca.sqlerrm.sqlerrmc << endl;
	cout << "in " << oraca.orastxt.orastxtc << endl;
	cout << "on line " << oraca.oraslnr << " of " << oraca.orasfnm.orasfnmc
		<< endl << endl;
	
	//-- Roll back any pending changes and disconnect from Oracle.
	EXEC SQL ROLLBACK RELEASE;
	exit(1);
}


//-- Connect to ORACLE. 
void db_connect(char *in_login)
{
	login = in_login;  // a pointer assignment, in_login has the space acclocation

    EXEC SQL WHENEVER SQLERROR DO sql_error("ORACLE error in db_connect--");

	//cout<<"\nConnecting to ORACLE  as: "<<login<<endl;
	cout<<"\nConnecting to ORACLE  "<<endl;
 
    EXEC SQL CONNECT :login;
	EXEC SQL ALTER SESSION SET NLS_DATE_FORMAT="DD/MM/YYYY HH24:MI:SS"; 
	cout<<"Connected  to Database"<<endl<<endl; 

}





void db_disconnect()
{
	cout<<"\nORACLE  database: DISCONNECT"<<endl;
	EXEC SQL COMMIT WORK RELEASE; 
}	




// get cdr files
void cdr_files::db_read_primary()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct cdr_file_t
	{ 
		char file_name[BUF_LEN];			// varchar2(123)
		int file_id;					// called id_no in table number(9)
	} a[FETCH_SIZE]; 
	int rows_to_fetch, rows_before, rows_this_time; 

	EXEC SQL END DECLARE SECTION;

	int i;

	rows_to_fetch = FETCH_SIZE;		// number of rows in each "batch"  
	rows_before = 0;				// previous value of sqlerrd[2]   
	rows_this_time = FETCH_SIZE;
	 
	EXEC SQL WHENEVER SQLERROR DO sql_error("ORACLE error in db_read_primary()");

    EXEC SQL DECLARE c_cdr_file CURSOR FOR 

	SELECT	FILE_NAME,  CDR_FILE_ID_NO
	FROM	sys_smsc_primary_dump_files
	WHERE DECODED_DATE IS NULL;
       
    EXEC SQL OPEN c_cdr_file; 
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR DO sql_error("ORACLE error:"); 

	while (rows_this_time == rows_to_fetch) 
	{ 
		EXEC SQL FETCH c_cdr_file INTO :a; 		 
		rows_this_time = sqlca.sqlerrd[2] - rows_before; 
		rows_before = sqlca.sqlerrd[2]; 
		//printf(" this=%d before=%d to_fetch=%d\n", rows_this_time, rows_before, rows_to_fetch);


		cdr_file_statistics cd;
		cd.init();
		for(i=0; i<rows_this_time; i++)
		{
			cd.file_id = a[i].file_id;			
			insert(a[i].file_name, cd);
		}
	} 

    EXEC SQL CLOSE c_cdr_file; 
 
    printf("\n %d  cdr files loaded.\n\n",rows_before);
}

// get cdr files
void cdr_files::db_read_secondary()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct cdr_file_t
	{ 
		char file_name[BUF_LEN];			// varchar2(123)
		int file_id;					// called id_no in table number(9)
	} a[FETCH_SIZE]; 
	int rows_to_fetch, rows_before, rows_this_time; 

	EXEC SQL END DECLARE SECTION;

	int i;

	rows_to_fetch = FETCH_SIZE;		// number of rows in each "batch"  
	rows_before = 0;				// previous value of sqlerrd[2]   
	rows_this_time = FETCH_SIZE;
	 
	EXEC SQL WHENEVER SQLERROR DO sql_error("ORACLE error in db_read_secondary()");

    EXEC SQL DECLARE c_cdr_file_s CURSOR FOR 

	SELECT	FILE_NAME,  CDR_FILE_ID_NO
	FROM	sys_smsc_secondary_dump_files
	WHERE DECODED_DATE IS NULL;
       
    EXEC SQL OPEN c_cdr_file_s; 
	EXEC SQL WHENEVER NOT FOUND CONTINUE;
	EXEC SQL WHENEVER SQLERROR DO sql_error("ORACLE error in db_read_secondary()"); 

	while (rows_this_time == rows_to_fetch) 
	{ 
		EXEC SQL FETCH c_cdr_file_s INTO :a; 		 
		rows_this_time = sqlca.sqlerrd[2] - rows_before; 
		rows_before = sqlca.sqlerrd[2]; 
		//printf(" this=%d before=%d to_fetch=%d\n", rows_this_time, rows_before, rows_to_fetch);


		cdr_file_statistics cd;
		cd.init();
		for(i=0; i<rows_this_time; i++)
		{
			cd.file_id = a[i].file_id;			
			insert(a[i].file_name, cd);
		}
	} 

    EXEC SQL CLOSE c_cdr_file_s; 
 
    printf("\n %d  cdr files loaded.\n\n",rows_before);
}

void cdr_files::db_update_primary(cdr_file_statistics s)
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct cdr_file_t
	{ 
		 int valid_cdr_count;					//  number(7)
		 int error_count;						//	number(7)
		 int bytes_read;						//	number(9)
		 char first_cdr_date[BUF_LENTH];				//	varchar2(14)
		 char last_cdr_date[BUF_LENTH];				//	varchar2(14)
		 int rating_duration;
		 char rating_start_date[BUF_LENTH];	//	varchar2(14)

		 int id_no;						//	number(9)
 	} a; 

	EXEC SQL END DECLARE SECTION;

	//EXEC SQL WHENEVER NOT FOUND GOTO nofile;

//#ifndef code_skip

	 cout << "a.id_no :" <<a.id_no<<endl;
	 cout <<"s.file_id : "<<s.file_id<<endl;
	 a.id_no = s.file_id;
	 cout << "a.id_no :" <<a.id_no<<endl;
	 cout <<"s.file_id : "<<s.file_id<<endl;

	 a.valid_cdr_count = s.valid_cdr_count;
	 a.error_count = s.error_count;
	 a.bytes_read = s.bytes_read;
	 strcpy(a.first_cdr_date, s.first_cdr_date.c_str());
	 strcpy(a.last_cdr_date, s.last_cdr_date.c_str());
	 a.rating_duration = s.rating_duration;
	 strcpy(a.rating_start_date, s.rating_start_date.c_str());
	 
	 	
//#endif

	 EXEC SQL WHENEVER SQLERROR DO sql_error("ORACLE error in db_update_primary");
	 EXEC SQL	
	 UPDATE sys_smsc_primary_dump_files

	 SET 
		valid_cdr_count			= :a.valid_cdr_count, 
		error_count				= :a.error_count,
		bytes_read				= :a.bytes_read,
		first_cdr_date			= to_date(:a.first_cdr_date,'YYYYMMDDHH24MISS'),
		last_cdr_date			= to_date(:a.last_cdr_date,'YYYYMMDDHH24MISS'),
		//decoded_date		= to_date(:a.rating_start_date,'YYYYMMDDHH24MISS')
		decoded_date		= SYSDATE
	 WHERE cdr_file_id_no  = :a.id_no;

	 EXEC SQL COMMIT;
 
    printf("\n cdr file id=%d log updated.\n\n", s.file_id);
	//return;
//nofile:
	//printf("\n <ERROR> file id = %d  not found to update.\n\n", s.file_id);
}		

void cdr_files::db_update_secondary(cdr_file_statistics s)
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct cdr_file_t
	{ 
		 int valid_cdr_count;					//  number(7)
		 int error_count;						//	number(7)
		 int bytes_read;						//	number(9)
		 char first_cdr_date[BUF_LENTH];				//	varchar2(14)
		 char last_cdr_date[BUF_LENTH];				//	varchar2(14)
		 int rating_duration;
		 char rating_start_date[BUF_LENTH];	//	varchar2(14)

		 int id_no;						//	number(9)
 	} a; 

	EXEC SQL END DECLARE SECTION;

	//EXEC SQL WHENEVER NOT FOUND GOTO nofile;

//#ifndef code_skip

	 cout << "a.id_no :" <<a.id_no<<endl;
	 cout <<"s.file_id : "<<s.file_id<<endl;
	 a.id_no = s.file_id;
	 cout << "a.id_no :" <<a.id_no<<endl;
	 cout <<"s.file_id : "<<s.file_id<<endl;

	 a.valid_cdr_count = s.valid_cdr_count;
	 a.error_count = s.error_count;
	 a.bytes_read = s.bytes_read;
	 strcpy(a.first_cdr_date, s.first_cdr_date.c_str());
	 strcpy(a.last_cdr_date, s.last_cdr_date.c_str());
	 a.rating_duration = s.rating_duration;
	 strcpy(a.rating_start_date, s.rating_start_date.c_str());
	 
	 	
//#endif

	 EXEC SQL WHENEVER SQLERROR DO sql_error("ORACLE error in db_update_secondary");
	 EXEC SQL	
	 UPDATE sys_smsc_secondary_dump_files

	 SET 
		valid_cdr_count			= :a.valid_cdr_count, 
		error_count				= :a.error_count,
		bytes_read				= :a.bytes_read,
		first_cdr_date			= to_date(:a.first_cdr_date,'YYYYMMDDHH24MISS'),
		last_cdr_date			= to_date(:a.last_cdr_date,'YYYYMMDDHH24MISS'),
		//decoded_date		= to_date(:a.rating_start_date,'YYYYMMDDHH24MISS')
		decoded_date		= SYSDATE
	 WHERE cdr_file_id_no  = :a.id_no;

	 EXEC SQL COMMIT;
 
    printf("\n cdr file id=%d log updated.\n\n", s.file_id);
	//return;
//nofile:
	//printf("\n <ERROR> file id = %d  not found to update.\n\n", s.file_id);
}

/*
void sub_service_networks::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct network_number 
	{ 
		char	network_id[BUF_LEN]; 
		int 	sub_service_id; 
		
	} a, *n_n_ptr; 
	int i;
	EXEC SQL END DECLARE SECTION;
	
	n_n_ptr = &a;
	
	EXEC SQL  DECLARE c_sub_service_network CURSOR FOR 
		SELECT NETWORK_ID, SUB_SERVICE_ID
		FROM gsm_sub_service_networks; 
	
	EXEC SQL OPEN   c_sub_service_network; 
	
	//EXEC SQL WHENEVER NOT FOUND DO break; 
	
	for (i=0; ;i++) 
	{ 
		EXEC SQL FETCH c_sub_service_network INTO :n_n_ptr; 
		insert(n_n_ptr->network_id, n_n_ptr->sub_service_id);
	} 
	
	EXEC SQL  CLOSE c_sub_service_network; 
	
	cout<<setw(8)<<i<<" medv_smsc_network's loaded."<<endl;
}
*/

void sub_service_networks::db_read()
{
	EXEC SQL BEGIN DECLARE SECTION;

	struct net_t
	{ 
		char	network_id[BUF_LEN]; 
		int 	sub_service_id; 
	} *a;

	struct net_ind
	{ 
 		short	network_id_ind;
		short	sub_service_id_ind;
	}a_ind[FETCH_SIZE];

	int rows_to_fetch, rows_before, rows_this_time;

EXEC SQL END DECLARE SECTION;

	int i;

	rows_to_fetch = FETCH_SIZE;		// number of rows in each "batch"  
	rows_before = 0;				   // previous value of sqlerrd[2]   
	rows_this_time = FETCH_SIZE; 

	if((a = new net_t[rows_to_fetch])==NULL)
	{
		cout<<" cant allocate memory for medv_smsc_networks fetch"<<endl;
		exit(0);
	}

	EXEC SQL WHENEVER SQLERROR DO sql_error("ORACLE error in sub_service_networks::db_read()");

 
	EXEC SQL  DECLARE c_sub_service_network CURSOR FOR 
	SELECT	NETWORK_ID, 
			SUB_SERVICE_ID
	FROM MEDV_SMSC_NETWORKS; 

 
	EXEC SQL OPEN c_sub_service_network; 
	EXEC SQL WHENEVER NOT FOUND CONTINUE; 

	while (rows_this_time == rows_to_fetch) 
	{ 
		EXEC SQL FOR :rows_to_fetch FETCH c_sub_service_network INTO :a INDICATOR :a_ind; 		 

		rows_this_time = sqlca.sqlerrd[2] - rows_before; 
		rows_before = sqlca.sqlerrd[2]; 
//		printf(" this=%d before=%d \n", rows_this_time, rows_before);
		printf(" medv_smsc_networks=%d \n", rows_before);

		for(i=0; i<rows_this_time; i++)
		{

			//handling null fetches

			a[i].sub_service_id = (a_ind[i].sub_service_id_ind < 0) ? 99 : a[i].sub_service_id;
			strcpy(a[i].network_id,
				  ((a_ind[i].network_id_ind < 0) ? "UNDEF":a[i].network_id));
					
			if ( a[i].sub_service_id == 1 )
				insert_sub_service_map(a[i].network_id, a[i].sub_service_id);
			else if ( a[i].sub_service_id == 2 )
					insert_applications_map(a[i].network_id, a[i].sub_service_id);
		}
	} 

	EXEC SQL CLOSE c_sub_service_network; 
	delete a;
	printf("%d  medv_smsc_networks data read.\n\n",rows_before);
}		


void db_insert_decoded_cdr(int cdr_count)
{
	EXEC SQL BEGIN DECLARE SECTION;

	static struct db_cdr
	{	
		int		file_id;								//  number(9)
		int		file_pos;								//	number(9)
		char	message_source[BUF_LEN];				//	varchar2(10)
		char	destination_address[BUF_LEN];			//	varchar2(30)
		char	originating_address[BUF_LEN];			//	varchar2(30)
		int		traffic_event_type;						//  number(9)
		char	traffic_event_time[BUF_LEN];			//	date
		int		destination_logical_sme;				//  number(9)
		char	call_time[BUF_LEN];						//	date - accept_time/traffic_event_time
		//char	duplicate_message_behaviour[BUF_LEN];	//	varchar2(30)
		char	sme_reference_number[BUF_LEN];			//	varchar2(30)
		//int		first_in_batch;							//  number(9)
		int		call_direction;							//  number(9)
		int		distribution;							//  number(9)
		char	destination_imsi[BUF_LEN];				//	varchar2(30)
		//char	closed_user_group[BUF_LEN];				//	varchar2(30)
		//char	cug_type[BUF_LEN];						//	varchar2(30)
		char	originating_imsi[BUF_LEN];				//	varchar2(30)
		int		first_network_operation;				//	number(9)
		int		first_delivery_network;					//	number(9)
		int		second_network_operation;				//	number(9)
		int		second_delivery_network;				//	number(9)
		//int		second_network_failure_type;			//	number(9)
		//int		second_network_error_returned;			//	number(9)
		//int		second_network_failure_cause;			//	number(9)
		//int		second_delivery_failure_reason;			//	number(9)
		int		priority;								//	number(9)
		//int		protocol_id;							//	number(9)
		int		smsc_reference_number;					//	number(9)
		char	source_node_sccp_address[BUF_LEN];		//	varchar2(30)
		char	destination_node_sccp_address[BUF_LEN];	//	varchar2(30)
		//int		billing_flags;							//	number(9)
		char	rate_address[BUF_LEN];					//	varchar2(30)
		char	rate_call_partner[BUF_LEN];				//	varchar2(30)
		char	rate_call_type[BUF_LEN];				//	varchar2(10)
		int		rate_sub_service_type;					//	number(2)
		int		sub_logical_sme;						//	number(9)
		char	accept_time[BUF_LEN];					//	date
		char	mediated_time[BUF_LEN];					//	date			- sysdate 
	} * a;

	char	med_system_date[20];  

	int rows_to_insert;
	
	EXEC SQL END DECLARE SECTION;

	EXEC SQL WHENEVER SQLERROR DO sql_error("ORACLE error in db_insert_decoded_cdr");
	
	rows_to_insert = cdr_count;
	
	if((a = new db_cdr[array_insert_size])==NULL)
	{
		cout<<" cant allocate memory for cdr insert"<<endl;
		exit(0);
	}
	
	
	for(int j=0; j<array_insert_size; j++)
	{
		a[j].file_pos = 0;
	}
	
	for(int i=0; i<rows_to_insert; i++)
	{
		a[i].file_id			= gsm_cdr_block[i].file_id; 
		a[i].file_pos			= gsm_cdr_block[i].file_pos;

		strncpy(a[i].message_source, gsm_cdr_block[i].message_source.c_str(), 10);
		strncpy(a[i].destination_address, gsm_cdr_block[i].destination_address.c_str(), 30);
		strncpy(a[i].originating_address, gsm_cdr_block[i].originating_address.c_str(), 30);
		a[i].traffic_event_type	= gsm_cdr_block[i].traffic_event_type;	
		
		reng_date d=gsm_cdr_block[i].d_traffic_event_time_date;
		reng_time t=gsm_cdr_block[i].d_traffic_event_time_time;
		char buf[100];
		buf[0] = '\0';
		sprintf(buf,"%02d%s%02d%s%04d%s%02d%s%02d%s%02d",d.day,"/",d.month,"/",d.year," ",t.hour,":",t.min,":",t.second); 
		strcpy(a[i].traffic_event_time, buf);
			
		a[i].destination_logical_sme	=gsm_cdr_block[i].destination_logical_SME;	
					
		d.init();
		t.init();
		d=gsm_cdr_block[i].d_accept_time_date;
		t=gsm_cdr_block[i].d_accept_time_time;
		buf[0] = '\0';
		sprintf(buf,"%02d%s%02d%s%04d%s%02d%s%02d%s%02d",d.day,"/",d.month,"/",d.year," ",t.hour,":",t.min,":",t.second); 
		strcpy(a[i].accept_time, buf);

		strncpy(a[i].call_time, gsm_cdr_block[i].call_time.c_str(), 19);
		a[i].call_time[19] = '\0';	
							
		//strncpy(a[i].duplicate_message_behaviour, gsm_cdr_block[i].duplicate_message_behaviour.c_str(), 30);	
		strncpy(a[i].sme_reference_number, gsm_cdr_block[i].SME_reference_number.c_str(), 30);			
		//a[i].first_in_batch				=gsm_cdr_block[i].first_in_batch;							
		a[i].call_direction				=gsm_cdr_block[i].call_direction;						
		a[i].distribution				=gsm_cdr_block[i].distribution;							
		strncpy(a[i].destination_imsi,	gsm_cdr_block[i].destination_IMSI.c_str(), 30);				
		//strncpy(a[i].closed_user_group, gsm_cdr_block[i].closed_user_group.c_str(), 30);				
		//strncpy(a[i].cug_type,			gsm_cdr_block[i].CUG_type.c_str(), 30);						
		strncpy(a[i].originating_imsi,	gsm_cdr_block[i].originating_IMSI.c_str(), 30);				
		a[i].first_network_operation	=gsm_cdr_block[i].first_network_operation;				
		a[i].first_delivery_network		=gsm_cdr_block[i].first_delivery_network;					
		a[i].second_network_operation	=gsm_cdr_block[i].second_network_operation;				
		a[i].second_delivery_network	=gsm_cdr_block[i].second_delivery_network;				
		//a[i].second_network_failure_type	=gsm_cdr_block[i].second_network_failure_type;			
		//a[i].second_network_error_returned	=gsm_cdr_block[i].second_network_error_returned;			
		//a[i].second_network_failure_cause	=gsm_cdr_block[i].second_network_failure_cause;		
		//a[i].second_delivery_failure_reason	=gsm_cdr_block[i].second_delivery_failure_reason;			
		a[i].priority					=gsm_cdr_block[i].priority;								
		//a[i].protocol_id				=gsm_cdr_block[i].protocol_id;							
		a[i].smsc_reference_number		=gsm_cdr_block[i].SMSC_reference_number;					
		strncpy(a[i].source_node_sccp_address, gsm_cdr_block[i].source_node_SCCP_address.c_str(), 30);		
		strncpy(a[i].destination_node_sccp_address, gsm_cdr_block[i].destination_node_SCCP_address.c_str(), 30);	
		//a[i].billing_flags				=gsm_cdr_block[i].billing_flags;
		
		strncpy(a[i].rate_address,		gsm_cdr_block[i].rate_address.c_str(), 30);				
		strncpy(a[i].rate_call_partner, gsm_cdr_block[i].rate_call_partner.c_str(), 30);				
		strncpy(a[i].rate_call_type,	gsm_cdr_block[i].rate_call_type.c_str(), 10);						
		a[i].rate_sub_service_type		=gsm_cdr_block[i].rate_sub_service_type;
		a[i].sub_logical_sme			=gsm_cdr_block[i].sub_logical_sme;
							
		
		if ( debug )
		{					
			cout <<"file_id						:" << a[i].file_id 					<<"|"<< endl;
			cout <<"file_pos					:" << a[i].file_pos 				<<"|"<< endl;
			cout <<"message_source				:" << a[i].message_source 			<<"|"<< endl;
			cout <<"destination_address			:" << a[i].destination_address 		<<"|"<< endl;
			cout <<"originating_address			:" << a[i].originating_address		<<"|"<< endl;
			cout <<"traffic_event_type			:" << a[i].traffic_event_type		<<"|"<< endl;
			cout <<"traffic_event_time			:" << a[i].traffic_event_time		<<"|"<< endl;
			cout <<"destination_logical_sme		:" << a[i].destination_logical_sme	<<"|"<< endl;
			cout <<"call_time (accept_time)		:" << a[i].call_time				<<"|"<< endl;
			//cout <<"duplicate_message_behaviour	:" << a[i].duplicate_message_behaviour	<<"|"<< endl;
			cout <<"sme_reference_number		:" << a[i].sme_reference_number		<<"|"<< endl;
			//cout <<"first_in_batch				:" << a[i].first_in_batch			<<"|"<< endl;
			cout <<"call_direction				:" << a[i].call_direction			<<"|"<< endl;
			cout <<"distribution				:" << a[i].distribution				<<"|"<< endl;
			cout <<"destination_imsi			:" << a[i].destination_imsi			<<"|"<< endl;
			//cout <<"closed_user_group			:" << a[i].closed_user_group		<<"|"<< endl;
			//cout <<"cug_type					:" << a[i].cug_type					<<"|"<< endl;
			cout <<"originating_imsi			:" << a[i].originating_imsi			<<"|"<< endl;
			cout <<"first_network_operation		:" << a[i].first_network_operation 	<<"|"<< endl;
			cout <<"first_delivery_network		:" << a[i].first_delivery_network	<<"|"<< endl;
			cout <<"second_network_operation	:" << a[i].second_network_operation	<<"|"<< endl;
			cout <<"second_delivery_network		:" << a[i].second_delivery_network	<<"|"<< endl;
			//cout <<"second_network_failure_type	:" << a[i].second_network_failure_type		<<"|"<< endl;
			//cout <<"second_network_error_returned	:" << a[i].second_network_error_returned<<"|"<< endl;
			//cout <<"second_network_failure_cause	:" << a[i].second_network_failure_cause	<<"|"<< endl;
			//cout <<"second_delivery_failure_reason	:" << a[i].second_delivery_failure_reason<<"|"<< endl;
			cout <<"priority					:" << a[i].priority					<<"|"<< endl;
			//cout <<"protocol_id					:" << a[i].protocol_id				<<"|"<< endl;
			cout <<"smsc_reference_number		:" << a[i].smsc_reference_number	<<"|"<< endl;
			cout <<"source_node_sccp_address	:" << a[i].source_node_sccp_address <<"|"<< endl;
			cout <<"destination_node_sccp_address	:" << a[i].destination_node_sccp_address<<"|"<< endl;
			//cout <<"billing_flags				:" << a[i].billing_flags			<<"|"<< endl;
			
			cout <<"rate_address				:" << a[i].rate_address				<<"|"<< endl;				
			cout <<"rate_call_partner			:" << a[i].rate_call_partner		<<"|"<< endl;				
			cout <<"rate_call_type				:" << a[i].rate_call_type			<<"|"<< endl;					
			cout <<"rate_sub_service_type		:" << a[i].rate_sub_service_type	<<"|"<< endl;
			cout <<"sub_logical_sme				:" << a[i].sub_logical_sme			<<"|"<< endl;
			cout <<"accept_time					:" << a[i].accept_time				<<"|"<< endl;
		}
	}

	EXEC SQL
	select sysdate into :med_system_date from dual;
	
	for(int k=0; k<array_insert_size; k++)
	{
		strcpy(a[k].mediated_time, med_system_date);
	}  

	EXEC SQL  FOR :rows_to_insert  INSERT INTO DYN_7_UDR 
	(
		file_id,
		file_pos,
		message_source,
		destination_address,
		originating_address,
		traffic_event_type,
		traffic_event_time,
		destination_logical_sme,
		call_time,						// accept_time
		//duplicate_message_behaviour,
		sme_reference_number,
		//first_in_batch,
		call_direction,
		distribution,
		destination_imsi,
		//closed_user_group,
		//cug_type,
		originating_imsi,
		first_network_operation,
		first_delivery_network,
		second_network_operation,
		second_delivery_network,
		//second_network_failure_type,
		//second_network_error_returned,
		//second_network_failure_cause,
		//second_delivery_failure_reason,
		priority,
		//protocol_id,
		smsc_reference_number,
		source_node_sccp_address,
		destination_node_sccp_address,
		//billing_flags,
		rate_address,
		rate_call_partner,
		rate_call_type_id,
		rate_sub_service_type,
		sub_logical_sme,
		accept_time,
		mediated_time
	) 
	VALUES (:a);
	
	EXEC SQL COMMIT;
	delete a;
}

void med_dialog_service_centers::db_read()
{
	EXEC SQL WHENEVER SQLERROR DO sql_error("ORACLE error - db_read_med_dialog_service_centers()");

	EXEC SQL BEGIN DECLARE SECTION;
	struct dialog_service_center 
	{ 
		char	service_center[BUF_LEN]; 
	} a, *dialog_service_center_ptr; 

	int i;
	EXEC SQL END DECLARE SECTION;
	
	dialog_service_center_ptr = &a;
	
	EXEC SQL  DECLARE c_dialog_service_center CURSOR FOR 
		SELECT SERVICE_CENTER
		FROM MED_DIALOG_SERVICE_CENTERS; 
	
	EXEC SQL OPEN   c_dialog_service_center; 
	
	EXEC SQL WHENEVER NOT FOUND DO break; 
	
	for (i=0; ;i++) 
	{ 
		EXEC SQL FETCH c_dialog_service_center INTO :dialog_service_center_ptr; 
		insert_dialog_service_centers(dialog_service_center_ptr->service_center);
	} 
	
	EXEC SQL  CLOSE c_dialog_service_center; 
	
	cout<<setw(8)<<i<<" med_dialog_service_centers loaded."<<endl;
	f_log<<setw(8)<<i<<" med_dialog_service_centers loaded."<<endl;
}


void db_insert_air_cdr(int cdr_count)
{
	EXEC SQL BEGIN DECLARE SECTION;

	static struct db_cdr
	{	
		int		file_id;								//  number(9)
		int		file_pos;								//	number(9)
		char	message_source[BUF_LEN];				//	varchar2(10)
		char	destination_address[BUF_LEN];			//	varchar2(30)
		char	originating_address[BUF_LEN];			//	varchar2(30)
		int		traffic_event_type;						//  number(9)
		char	traffic_event_time[BUF_LEN];			//	date
		int		destination_logical_sme;				//  number(9)
		char	call_time[BUF_LEN];						//	date - accept_time/traffic_event_time
		//char	duplicate_message_behaviour[BUF_LEN];	//	varchar2(30)
		char	sme_reference_number[BUF_LEN];			//	varchar2(30)
		//int		first_in_batch;							//  number(9)
		int		call_direction;							//  number(9)
		int		distribution;							//  number(9)
		char	destination_imsi[BUF_LEN];				//	varchar2(30)
		//char	closed_user_group[BUF_LEN];				//	varchar2(30)
		//char	cug_type[BUF_LEN];						//	varchar2(30)
		char	originating_imsi[BUF_LEN];				//	varchar2(30)
		int		first_network_operation;				//	number(9)
		int		first_delivery_network;					//	number(9)
		int		second_network_operation;				//	number(9)
		int		second_delivery_network;				//	number(9)
		//int		second_network_failure_type;			//	number(9)
		//int		second_network_error_returned;			//	number(9)
		//int		second_network_failure_cause;			//	number(9)
		//int		second_delivery_failure_reason;			//	number(9)
		int		priority;								//	number(9)
		//int		protocol_id;							//	number(9)
		int		smsc_reference_number;					//	number(9)
		char	source_node_sccp_address[BUF_LEN];		//	varchar2(30)
		char	destination_node_sccp_address[BUF_LEN];	//	varchar2(30)
		//int		billing_flags;							//	number(9)
		char	rate_address[BUF_LEN];					//	varchar2(30)
		char	rate_call_partner[BUF_LEN];				//	varchar2(30)
		char	rate_call_type[BUF_LEN];				//	varchar2(10)
		int		rate_sub_service_type;					//	number(2)
		int		sub_logical_sme;						//	number(9)
		char	accept_time[BUF_LEN];					//	date
		char	mediated_time[BUF_LEN];					//	date			- sysdate 
	} * a;

	char	med_system_date[20];  

	int rows_to_insert;
	
	EXEC SQL END DECLARE SECTION;

	EXEC SQL WHENEVER SQLERROR DO sql_error("ORACLE error in db_insert_air_cdr");
	
	rows_to_insert = cdr_count;
	
	if((a = new db_cdr[array_insert_size])==NULL)
	{
		cout<<" cant allocate memory for cdr insert"<<endl;
		exit(0);
	}
	
	
	for(int j=0; j<array_insert_size; j++)
	{
		a[j].file_pos = 0;
	}
	
	for(int i=0; i<rows_to_insert; i++)
	{
		a[i].file_id			= air_cdr_block[i].file_id; 
		a[i].file_pos			= air_cdr_block[i].file_pos;

		strncpy(a[i].message_source, air_cdr_block[i].message_source.c_str(), 10);
		strncpy(a[i].destination_address, air_cdr_block[i].destination_address.c_str(), 30);
		strncpy(a[i].originating_address, air_cdr_block[i].originating_address.c_str(), 30);
		a[i].traffic_event_type	= air_cdr_block[i].traffic_event_type;	
		
		reng_date d=air_cdr_block[i].d_traffic_event_time_date;
		reng_time t=air_cdr_block[i].d_traffic_event_time_time;
		char buf[100];
		buf[0] = '\0';
		sprintf(buf,"%02d%s%02d%s%04d%s%02d%s%02d%s%02d",d.day,"/",d.month,"/",d.year," ",t.hour,":",t.min,":",t.second); 
		strcpy(a[i].traffic_event_time, buf);
			
		a[i].destination_logical_sme	=air_cdr_block[i].destination_logical_SME;	
					
		d.init();
		t.init();
		d=air_cdr_block[i].d_accept_time_date;
		t=air_cdr_block[i].d_accept_time_time;
		buf[0] = '\0';
		sprintf(buf,"%02d%s%02d%s%04d%s%02d%s%02d%s%02d",d.day,"/",d.month,"/",d.year," ",t.hour,":",t.min,":",t.second); 
		strcpy(a[i].accept_time, buf);

		strncpy(a[i].call_time, air_cdr_block[i].call_time.c_str(), 19);
		a[i].call_time[19] = '\0';	
							
		//strncpy(a[i].duplicate_message_behaviour, air_cdr_block[i].duplicate_message_behaviour.c_str(), 30);	
		strncpy(a[i].sme_reference_number, air_cdr_block[i].SME_reference_number.c_str(), 30);			
		//a[i].first_in_batch				=air_cdr_block[i].first_in_batch;							
		a[i].call_direction				=air_cdr_block[i].call_direction;						
		a[i].distribution				=air_cdr_block[i].distribution;							
		strncpy(a[i].destination_imsi,	air_cdr_block[i].destination_IMSI.c_str(), 30);				
		//strncpy(a[i].closed_user_group, air_cdr_block[i].closed_user_group.c_str(), 30);				
		//strncpy(a[i].cug_type,			air_cdr_block[i].CUG_type.c_str(), 30);						
		strncpy(a[i].originating_imsi,	air_cdr_block[i].originating_IMSI.c_str(), 30);				
		a[i].first_network_operation	=air_cdr_block[i].first_network_operation;				
		a[i].first_delivery_network		=air_cdr_block[i].first_delivery_network;					
		a[i].second_network_operation	=air_cdr_block[i].second_network_operation;				
		a[i].second_delivery_network	=air_cdr_block[i].second_delivery_network;				
		//a[i].second_network_failure_type	=air_cdr_block[i].second_network_failure_type;			
		//a[i].second_network_error_returned	=air_cdr_block[i].second_network_error_returned;			
		//a[i].second_network_failure_cause	=air_cdr_block[i].second_network_failure_cause;		
		//a[i].second_delivery_failure_reason	=air_cdr_block[i].second_delivery_failure_reason;			
		a[i].priority					=air_cdr_block[i].priority;								
		//a[i].protocol_id				=air_cdr_block[i].protocol_id;							
		a[i].smsc_reference_number		=air_cdr_block[i].SMSC_reference_number;					
		strncpy(a[i].source_node_sccp_address, air_cdr_block[i].source_node_SCCP_address.c_str(), 30);		
		strncpy(a[i].destination_node_sccp_address, air_cdr_block[i].destination_node_SCCP_address.c_str(), 30);	
		//a[i].billing_flags				=air_cdr_block[i].billing_flags;
		
		strncpy(a[i].rate_address,		air_cdr_block[i].rate_address.c_str(), 30);				
		strncpy(a[i].rate_call_partner, air_cdr_block[i].rate_call_partner.c_str(), 30);				
		strncpy(a[i].rate_call_type,	air_cdr_block[i].rate_call_type.c_str(), 10);						
		a[i].rate_sub_service_type		=air_cdr_block[i].rate_sub_service_type;
		a[i].sub_logical_sme			=air_cdr_block[i].sub_logical_sme;
							
		
		if ( debug )
		{					
			cout <<"file_id						:" << a[i].file_id 					<<"|"<< endl;
			cout <<"file_pos					:" << a[i].file_pos 				<<"|"<< endl;
			cout <<"message_source				:" << a[i].message_source 			<<"|"<< endl;
			cout <<"destination_address			:" << a[i].destination_address 		<<"|"<< endl;
			cout <<"originating_address			:" << a[i].originating_address		<<"|"<< endl;
			cout <<"traffic_event_type			:" << a[i].traffic_event_type		<<"|"<< endl;
			cout <<"traffic_event_time			:" << a[i].traffic_event_time		<<"|"<< endl;
			cout <<"destination_logical_sme		:" << a[i].destination_logical_sme	<<"|"<< endl;
			cout <<"call_time (accept_time)		:" << a[i].call_time				<<"|"<< endl;
			//cout <<"duplicate_message_behaviour	:" << a[i].duplicate_message_behaviour	<<"|"<< endl;
			cout <<"sme_reference_number		:" << a[i].sme_reference_number		<<"|"<< endl;
			//cout <<"first_in_batch				:" << a[i].first_in_batch			<<"|"<< endl;
			cout <<"call_direction				:" << a[i].call_direction			<<"|"<< endl;
			cout <<"distribution				:" << a[i].distribution				<<"|"<< endl;
			cout <<"destination_imsi			:" << a[i].destination_imsi			<<"|"<< endl;
			//cout <<"closed_user_group			:" << a[i].closed_user_group		<<"|"<< endl;
			//cout <<"cug_type					:" << a[i].cug_type					<<"|"<< endl;
			cout <<"originating_imsi			:" << a[i].originating_imsi			<<"|"<< endl;
			cout <<"first_network_operation		:" << a[i].first_network_operation 	<<"|"<< endl;
			cout <<"first_delivery_network		:" << a[i].first_delivery_network	<<"|"<< endl;
			cout <<"second_network_operation	:" << a[i].second_network_operation	<<"|"<< endl;
			cout <<"second_delivery_network		:" << a[i].second_delivery_network	<<"|"<< endl;
			//cout <<"second_network_failure_type	:" << a[i].second_network_failure_type		<<"|"<< endl;
			//cout <<"second_network_error_returned	:" << a[i].second_network_error_returned<<"|"<< endl;
			//cout <<"second_network_failure_cause	:" << a[i].second_network_failure_cause	<<"|"<< endl;
			//cout <<"second_delivery_failure_reason	:" << a[i].second_delivery_failure_reason<<"|"<< endl;
			cout <<"priority					:" << a[i].priority					<<"|"<< endl;
			//cout <<"protocol_id					:" << a[i].protocol_id				<<"|"<< endl;
			cout <<"smsc_reference_number		:" << a[i].smsc_reference_number	<<"|"<< endl;
			cout <<"source_node_sccp_address	:" << a[i].source_node_sccp_address <<"|"<< endl;
			cout <<"destination_node_sccp_address	:" << a[i].destination_node_sccp_address<<"|"<< endl;
			//cout <<"billing_flags				:" << a[i].billing_flags			<<"|"<< endl;
			
			cout <<"rate_address				:" << a[i].rate_address				<<"|"<< endl;				
			cout <<"rate_call_partner			:" << a[i].rate_call_partner		<<"|"<< endl;				
			cout <<"rate_call_type				:" << a[i].rate_call_type			<<"|"<< endl;					
			cout <<"rate_sub_service_type		:" << a[i].rate_sub_service_type	<<"|"<< endl;
			cout <<"sub_logical_sme				:" << a[i].sub_logical_sme			<<"|"<< endl;
			cout <<"accept_time					:" << a[i].accept_time				<<"|"<< endl;
		}
	}

	EXEC SQL
	select sysdate into :med_system_date from dual;
	
	for(int k=0; k<array_insert_size; k++)
	{
		strcpy(a[k].mediated_time, med_system_date);
	}  

	EXEC SQL  FOR :rows_to_insert  INSERT INTO DYN_7_AIR_UDR 
	(
		file_id,
		file_pos,
		message_source,
		destination_address,
		originating_address,
		traffic_event_type,
		traffic_event_time,
		destination_logical_sme,
		call_time,						// accept_time
		//duplicate_message_behaviour,
		sme_reference_number,
		//first_in_batch,
		call_direction,
		distribution,
		destination_imsi,
		//closed_user_group,
		//cug_type,
		originating_imsi,
		first_network_operation,
		first_delivery_network,
		second_network_operation,
		second_delivery_network,
		//second_network_failure_type,
		//second_network_error_returned,
		//second_network_failure_cause,
		//second_delivery_failure_reason,
		priority,
		//protocol_id,
		smsc_reference_number,
		source_node_sccp_address,
		destination_node_sccp_address,
		//billing_flags,
		rate_address,
		rate_call_partner,
		rate_call_type_id,
		rate_sub_service_type,
		sub_logical_sme,
		accept_time,
		mediated_time
	) 
	VALUES (:a);
	
	EXEC SQL COMMIT;
	delete a;
}